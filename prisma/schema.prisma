generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  id                  Int                   @id @default(autoincrement())
  discord_id          String?               @unique @db.VarChar(50)
  nickname            String?               @db.VarChar(20)
  name                String                @db.VarChar(30)
  email               String                @unique @db.VarChar(80)
  phone_number        String                @unique @db.VarChar(15)
  gender              String?               @db.VarChar(7)
  birth               DateTime?             @db.Date
  restingheartrate    Int?
  createdat           DateTime?             @default(now()) @db.Timestamptz(6)
  updatedat           DateTime?             @default(now()) @db.Timestamptz(6)
  exercisepreferences exercisepreferences[]
  usersubscriptions   usersubscriptions[]
}

model exercisepreferences {
  id                         Int       @id @default(autoincrement())
  user_id                    Int?
  exercise_level             Int
  exercise_performance_level String?   @db.VarChar(10)
  exercise_goal              String    @db.VarChar(100)
  exercise_concern           String?   @db.VarChar(400)
  referral_source            String?   @db.VarChar(180)
  createdat                  DateTime? @default(now()) @db.Timestamptz(6)
  updatedat                  DateTime? @default(now()) @db.Timestamptz(6)
  users                      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("exercisepreferences")
}

model programbatches {
  id                Int                 @id @default(autoincrement())
  program_id        Int?
  batch_number      Int
  createdat         DateTime?           @default(now()) @db.Timestamptz(6)
  updatedat         DateTime?           @default(now()) @db.Timestamptz(6)
  programs          programs?           @relation(fields: [program_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  usersubscriptions usersubscriptions[]
}

model programs {
  id                 Int                 @id @default(autoincrement())
  type               String              @db.VarChar(10)
  description        String?
  start_date         DateTime?           @db.Date
  end_date           DateTime?           @db.Date
  duration_in_months Int
  createdat          DateTime?           @default(now()) @db.Timestamptz(6)
  updatedat          DateTime?           @default(now()) @db.Timestamptz(6)
  programbatches     programbatches[]
  usersubscriptions  usersubscriptions[]
}

model events {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  description       String?
  duration          Int
  start_date        DateTime            @db.Date
  end_date          DateTime            @db.Date
  createdat         DateTime?           @default(now()) @db.Timestamptz(6)
  updatedat         DateTime?           @default(now()) @db.Timestamptz(6)
  usersubscriptions usersubscriptions[]
}

model usersubscriptions {
  id             Int             @id @default(autoincrement())
  user_id        Int?
  program_id     Int?
  batch_id       Int?
  event_id       Int?
  start_date     DateTime?       @db.Date
  end_date       DateTime?       @db.Date
  status         String          @db.VarChar(10)
  createdat      DateTime?       @default(now()) @db.Timestamptz(6)
  updatedat      DateTime?       @default(now()) @db.Timestamptz(6)
  programbatches programbatches? @relation(fields: [batch_id], references: [id], onUpdate: NoAction)
  events         events?         @relation(fields: [event_id], references: [id], onUpdate: NoAction)
  programs       programs?       @relation(fields: [program_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users          users?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
